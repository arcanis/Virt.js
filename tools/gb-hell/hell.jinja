{% macro r16cpy(to, from) %}
    {% if to != from %}
        {% if to == "sp" %}
            ld {{to}}, {{from}}
        {% elif from == "sp" %}
            ld {{to}}, [{{from}}+0]
        {% else %}
            ld {{to[0]}}, {{from[0]}}
            ld {{to[1]}}, {{from[1]}}
        {% endif %}
    {% endif %}
{% endmacro %}

{% macro asmfor_init(target, value) %}
    ld {{target}}, {{value}}
{% endmacro %}

SECTION "TestRom", ROM0[$0100]

    nop
    jp Start

    DB $CE,$ED,$66,$66,$CC,$0D,$00,$0B
    DB $03,$73,$00,$83,$00,$0C,$00,$0D
    DB $00,$08,$11,$1F,$88,$89,$00,$0E
    DB $DC,$CC,$6E,$E6,$DD,$DD,$D9,$99
    DB $BB,$BB,$67,$63,$6E,$0E,$EC,$CC
    DB $DD,$DC,$99,$9F,$BB,$B9,$33,$3E

    DB "Hell",$00,$00,$00,$00,$00,$00,$00

    DB "    "

SECTION "Program Start", ROM0[$0150]

Start::

    ld a, 0

    {# ADD a, r #}
    {% for rB in r8 | except(["a"]) %}
        {% set rCountA = r8 | except(["a", rB])[0] %}
        {% asmfor rCountA, relevant8Bits %}
            ld a, {{rCountA}}
            {% asmfor rB, relevant8Bits %}
                add a, {{rB}}
            {% endasmfor %}
        {% endasmfor %}
    {% endfor %}

    {# ADD a, a #}
    {% asmfor "b", relevant8Bits %}
        ld a, b
        add a, a
    {% endasmfor %}

    {# ADD hl, rr #}
    {% for rrB in r16 | except(["af", "hl"]) %}
        {% set rrCountA = r16 | except(["af", rrB])[0] %}
        {% asmfor rrCountA, relevant16Bits %}
            {% asmfor rrB, relevant16Bits %}
                {{r16cpy("hl", rrCountA)}}
                add hl, {{rrB}}
            {% endasmfor %}
        {% endasmfor %}
    {% endfor %}

    {# ADD hl, hl #}
    {% asmfor "bc", relevant16Bits %}
        {{r16cpy("hl", "bc")}}
        add hl, hl
    {% endasmfor %}

    {# ADD hl, sp #}
    {{r16cpy("hl", "sp")}}
    {{r16cpy("de", "hl")}}
    {% asmfor "bc", relevant16Bits %}
        {% asmfor "sp", relevant16Bits %}
            {{r16cpy("hl", "bc")}}
            add hl, sp
        {% endasmfor %}
    {% endasmfor %}
    {{r16cpy("hl", "de")}}
    {{r16cpy("sp", "hl")}}

    {# ADD sp, n #}
    {% for n in relevant8Bits %}
        {% asmfor "sp", relevant16Bits %}
            add sp, {{n}}
        {% endasmfor %}
    {% endfor %}

    {# ADC a, r [carry = 0] #}
    {% for rA in r8 | except(["a"]) %}
        {% set rB = r8 | except(["a", rB])[0] %}
        {% asmfor rA, relevant8Bits %}
            {% asmfor rB, relevant8Bits %}
                ld a, 0
                rra {# reset carry #}
                ld a, {{rB}}
                adc a, {{rA}}
            {% endasmfor %}
        {% endasmfor %}
    {% endfor %}

    {# ADC a, r [carry = 1] #}
    {% for rA in r8 | except(["a"]) %}
        {% set rB = r8 | except(["a", rB])[0] %}
        {% asmfor rA, relevant8Bits %}
            {% asmfor rB, relevant8Bits %}
                ld a, 1
                rra {# set carry #}
                ld a, {{rB}}
                adc a, {{rA}}
            {% endasmfor %}
        {% endasmfor %}
    {% endfor %}

    {# INC r #}
    {% for r in ["c", "e", "l", "a"] %}
        {% asmfor r, relevant8Bits %}
            inc {{r}}
        {% endasmfor %}
    {% endfor %}

    {# INC rr #}
    {% for rr in ["bc", "de", "hl", "sp"] %}
        {% asmfor rr, relevant16Bits %}
            inc {{rr}}
        {% endasmfor %}
    {% endfor %}

    {# DEC r #}
    {% for r in ["c", "e", "l", "a"] %}
        {% asmfor r, relevant8Bits %}
            dec {{r}}
        {% endasmfor %}
    {% endfor %}

    {# DEC rr #}
    {% for rr in ["bc", "de", "hl", "sp"] %}
        {% asmfor rr, relevant16Bits %}
            dec {{rr}}
        {% endasmfor %}
    {% endfor %}

    {# LD hl, sp+n #}
    {% for n in relevant8Bits %}
        {% asmfor "sp", relevant16Bits %}
            ld hl, [sp {{n}}]
        {% endasmfor %}
    {% endfor %}

    halt
